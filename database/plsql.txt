All the Functions, Procedures and Triggers created for the project
Copy these into postgresql before running

1. Functions
    i. get employee authentication:

    create or replace function get_employee_authentication(email varchar, password varchar)
    returns int
    language plpgsql
    as 
    $$
    declare 
        pass varchar;
    
    begin
        select e_password into pass
        from employee
        where e_email = email;

        if not found then
            return -1;
        
        elseif pass = password then
            return 1;
        
        else
            return 0;

        end if;
    end;
    $$;

    ii. get customer authentication:

    create or replace function get_customer_authentication(email varchar, password varchar)
    returns int
    language plpgsql
    as 
    $$
    declare 
        pass varchar;
    
    begin
        select c_password into pass
        from customer
        where c_email = email;

        if not found then
            return -1;
        
        elseif pass = password then
            return 1;
        
        else
            return 0;

        end if;
    end;
    $$;

    iii. get driver authentication:

    create or replace function get_driver_authentication(email varchar, password varchar)
    returns int
    language plpgsql
    as 
    $$
    declare 
        pass varchar;
    
    begin
        select d_password into pass
        from driver
        where d_email = email;

        if not found then
            return -1;
        
        elseif pass = password then
            return 1;
        
        else
            return 0;

        end if;
    end;
    $$;


Views:

create or replace view e_past_bookings as
select b.b_id, e_id, from_date, to_date, b_amount, v_type, v_model, v_numberplate, c_fname, c_lname, c_email, d_name, d_email, amount, description
from booking b natural join car v natural join customer natural join driver left outer join penalties p on b.b_id = p.b_id
where active=0;


Triggers:

CREATE OR REPLACE FUNCTION active_curr_past_func()
RETURNS trigger AS
$$
BEGIN

        update booking b set active=0 where b.b_id=new.b_id;

    RETURN NULL;

END
$$  LANGUAGE plpgsql;

CREATE TRIGGER active_curr_past_trig
AFTER INSERT ON penalties
FOR EACH ROW
EXECUTE PROCEDURE active_curr_past_func();